name: Build and Test C Program

on:
  push:
  pull_request:

jobs:
  build-and-test:
    # We'll run on each OS from the matrix below
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler: [gcc, clang, msvc, mingw]
        c_standard: [c99, c11, c17, c23]

        # Exclude invalid compiler/OS combos:
        exclude:
          # MSVC and MinGW only make sense on Windows
          - os: ubuntu-latest
            compiler: msvc
          - os: ubuntu-latest
            compiler: mingw
          - os: macos-latest
            compiler: msvc
          - os: macos-latest
            compiler: mingw
          - os: windows-latest
            compiler: msvc
            c_standard: c99
          - os: windows-latest
            compiler: msvc
            c_standard: c23

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # -------------------------------------------------------
      # Install compilers on Linux (ubuntu-latest)
      # -------------------------------------------------------
      - name: Install compiler (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y gcc
          elif [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y clang
          fi

      # -------------------------------------------------------
      # Install compilers on macOS (macos-latest)
      # -------------------------------------------------------
      - name: Install compiler (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc
          fi
          # Clang (Apple Clang) is already present on macOS runners.

      # -------------------------------------------------------
      # Install compilers on Windows (windows-latest)
      # -------------------------------------------------------
      - name: Install compiler (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # MinGW-w64
          if ($Env:compiler -eq "mingw") {
            choco install mingw --version=8.1.0 -y
          }

          # Clang/LLVM
          if ($Env:compiler -eq "clang") {
            choco install llvm -y
          }

          # MSVC is already installed on windows-latest,
          # but we can still configure environment if needed.

      # -------------------------------------------------------
      # Build and Run on Linux/macOS
      # (GitHub Actions uses Bash by default on these OSes)
      # -------------------------------------------------------
      - name: Build and run (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          echo "OS: ${{ matrix.os }}"
          echo "Compiler: ${{ matrix.compiler }}"
          echo "C Standard: ${{ matrix.c_standard }}"

          COMP="${{ matrix.compiler }}"
          STD="${{ matrix.c_standard }}"

          if [ "$COMP" = "gcc" ]; then
            gcc -std=$STD dandd.c -o dandd
          elif [ "$COMP" = "clang" ]; then
            clang -std=$STD dandd.c -o dandd
          fi

          # Run the executable
          ./dandd

      # -------------------------------------------------------
      # Build and Run on Windows
      # (By default, GitHub Actions uses PowerShell on Windows)
      # -------------------------------------------------------
      - name: Build and run (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Write-Host "OS: Windows"
          Write-Host "Compiler: $Env:compiler"
          Write-Host "C Standard: $Env:c_standard"

          # Map the C standard for MSVC:
          $msvcStdFlag = ""
          switch ($Env:c_standard) {
            "c11" { $msvcStdFlag = "/std:c11" }
            "c17" { $msvcStdFlag = "/std:c17" }
          }

          if ($Env:compiler -eq "msvc") {
            cl $msvcStdFlag dandd.c /Fe:dandd.exe
          }
          elseif ($Env:compiler -eq "mingw") {
            # MinGW's gcc
            gcc -std=$Env:c_standard dandd.c -o dandd.exe
          }
          elseif ($Env:compiler -eq "clang") {
            # clang from LLVM package
            clang -std=$Env:c_standard dandd.c -o dandd.exe
          }
          else {
            Write-Host "Unknown compiler on Windows: $Env:compiler"
            exit 1
          }

          # Run the resulting program
          .\dandd.exe