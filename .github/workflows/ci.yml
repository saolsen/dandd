name: Build and Test C Program

on:
  push:
  pull_request:


jobs:
  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang, msvc]
        c_standard: [c99, c11, c17, c2x]
        exclude:
          - compiler: msvc
            c_standard: c99
          - compiler: msvc
            c_standard: c2x
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install mingw (gcc)
        if: matrix.compiler == 'gcc'
        shell: powershell
        run: choco install mingw --version=8.1.0 -y
      
      - name: Install clang
        if: matrix.compiler == 'clang'
        shell: powershell
        run: choco install llvm -y
      
      - name: Configure msvc
        if: matrix.compiler == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build and run (msvc)
        if: runner.os == 'Windows' && matrix.compiler == 'msvc'
        shell: powershell
        env:
          CC: ${{ matrix.compiler }}      # Map matrix.compiler → $Env:CC
          C_STANDARD: ${{ matrix.c_standard }}  # Map matrix.c_standard → $Env:C_STANDARD
        run: |
          $msvcStdFlag = ""
          switch ($Env:C_STANDARD) {
            "c11" { $msvcStdFlag = "/std:c11" }
            "c17" { $msvcStdFlag = "/std:c17" }
          }

          cl $msvcStdFlag dandd.c /Fe:dandd.exe
          .\dandd.exe

      - name: Build and run (gcc/clang)
        if: runner.os == 'Windows' && matrix.compiler != 'msvc'
        env:
          CC: ${{ matrix.compiler }}      # Map matrix.compiler → $Env:CC
          C_STANDARD: ${{ matrix.c_standard }}  # Map matrix.c_standard → $Env:C_STANDARD
        run: |
          & "$Env:CC" "-std=$Env:C_STANDARD" -Wall -Wextra -Werror -Wconversion dandd.c -o dandd.exe

          .\dandd.exe

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        c_standard: [c99, c11, c17, c2x]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install gcc
        if: matrix.compiler == 'gcc'
        run: brew install -q gcc

      - name: Build and run (gcc/clang)
        env:
          CC: ${{ matrix.compiler }}
        run: |
          # Normal "gcc" is aliased to clang on macOS, use the homebrew one.
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            CC=gcc-14 
          fi

          $CC -std=${{ matrix.c_standard }} -Wall -Wextra -Werror -Wconversion dandd.c -o dandd
          ./dandd

  linux:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        c_standard: [c99, c11, c17, c2x]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install gcc
        if: matrix.compiler == 'gcc'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Install clang
        if: matrix.compiler == 'clang'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Build and run (gcc/clang)
        env:
          CC: ${{ matrix.compiler }}
        run: |
          $CC -std=${{ matrix.c_standard }} -Wall -Wextra -Werror -Wconversion dandd.c -o dandd
          ./dandd
